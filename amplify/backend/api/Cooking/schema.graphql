type S3Object {
  bucket: String
  region: String
  key: String!
}

type Media {
    file: S3Object
}

type Ingredients {
    image: Media
    items: [String!]
} 

type Step {
    image: Media
    description: String!
}

type Like @model @auth(rules: [{
  allow: owner,
  operations: [create, update, delete]
}]) {
  id: ID!
  meal: Meal @connection(name: "MealLike")
  likedBy: User @connection(name: "UserLike")
}

type Follower @model @auth(rules: [{
  allow: owner,
  operations: [create, update, delete]
}]) {
  id: ID!
  user: User @connection(name: "UserFollowing")
  followedBy: User @connection(name: "UserFollowers")
}

type Meal @model @auth(rules: [{
  allow: owner,
  operations: [create, update, delete]
}]) {
  id: ID!
  title: String!
  image: Media
  description: String

  likes: [Like] @connection(name: "MealLike")
  inspiredBy: Meal @connection
  menuItem: MenuItem @connection(name: "MenuMeal")
  createdBy: User @connection(name: "UserMeal")

  recipe: String
  ingredients: [Ingredients]
  steps: [Step]
  tags: [String!]
}

type MenuItem @model @auth(rules: [{
  allow: owner,
  operations: [create, update, delete]
}]) {
  id: ID!
  order: Int!

  meal: Meal @connection(name: "MenuMeal")
  createdBy: User @connection(name: "UserMenuItem")
}

type User @model @auth(rules: [{
  allow: owner,
  operations: [create, update, delete]
}]){
  id: ID!
  username: String!
  email: String
  firstName: String
  lastName: String
  bio: String
  image: Media

  meals: [Meal] @connection(name: "UserMeal")
  menuItems: [MenuItem] @connection(name: "UserMenuItem")
  likes: [Like] @connection(name: "UserLike")

  followers: [Follower] @connection(name: "UserFollowers")
  following: [Follower] @connection(name: "UserFollowing")
}
